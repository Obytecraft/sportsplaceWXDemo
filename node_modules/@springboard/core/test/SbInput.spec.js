import 'chai/register-should'
import { mount } from '@vue/test-utils'

import { SbInput } from '../src/components'

const LABEL = 'Click here'
const ERROR_MESSAGE = 'Custom error message'
const VALUE = 'New value'

describe('SbInput.vue', () => {
  // click event is emitted in real life, but note in test...
  // TODO : investigate
  xit('Should_EmitClickEvent_When_InputIsClicked', () => {
    const wrapper = mount(SbInput)

    wrapper.find('input').trigger('click')

    wrapper.emitted().click.should.exist
  })

  it('Should_EmitInputEvent_When_InputValueChanged', () => {
    const wrapper = mount(SbInput)

    const inputWrapper = wrapper.find('input')

    inputWrapper.element.value = VALUE
    inputWrapper.trigger('input')
    inputWrapper.trigger('change')

    wrapper.emitted().input.should.exist
    wrapper.emitted().input[0].should.contain(VALUE)

    wrapper.emitted().change.should.exist
    wrapper.emitted().change[0].should.contain(VALUE)
  })

  it('Should_InputLabelBeClickHere_When_LabelIsSetToClickHere', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        label: LABEL
      }
    })

    wrapper.contains('.textfield-label').should.be.true
    wrapper.find('.textfield-label').text().should.be.equal(LABEL)
  })

  it('Should_InputLabelEndsBy*_When_RequiredIsSetToTrue', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        label: LABEL,
        required: true
      }
    })

    wrapper.contains('.textfield-label').should.be.true
    wrapper.find('.textfield-label').text().should.be.equal(LABEL + '*')
  })

  it('Should_InputTypeBeSubmit_When_TypeIsSetToSubmit', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        type: 'submit'
      }
    })

    wrapper.contains('.textfield-input').should.be.true
    wrapper.find('.textfield-input').attributes('type').should.be.equal('submit')
  })

  it('Should_ErrorMessageDisplayed_When_RequiredIsSetToTrueAndInputEmpty', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        required: true
      }
    })

    wrapper.contains('.textfield-error-message').should.be.true
    wrapper.find('.textfield-error-message').isEmpty().should.be.false

    wrapper.find('.textfield-input').setValue(VALUE)
    wrapper.contains('.textfield-error-message').should.be.false
  })

  it('Should_ErrorMessageDisplayed_When_HasErrorIsSetToTrue', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        hasError: true
      }
    })

    wrapper.contains('.textfield-error-message').should.be.true
    wrapper.find('.textfield-error-message').isEmpty().should.be.false
  })

  it('Should_ErrorMessageBeEqualToCustomErrorMessage_When_ErrorMessageIsSetToCustomErrorMessage', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        required: true,
        errorMessage: ERROR_MESSAGE
      }
    })

    wrapper.contains('.textfield-error-message').should.be.true
    wrapper.find('.textfield-error-message').text().should.be.equal(ERROR_MESSAGE)
  })

  it('Should_HaveButtonIconValid_When_ButtonIconIsSetToValid', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        buttonIcon: 'valid'
      }
    })

    wrapper.contains('.textfield-button-container').should.be.true
    wrapper.find('.icon').classes().should.contain('icon-valid')
  })

  it('Should_HaveLeftIconValid_When_LeftIconIsSetToValid', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        leftIcon: 'valid'
      }
    })

    wrapper.contains('.textfield-left-icon.icon').should.be.true
    wrapper.find('.textfield-left-icon.icon').classes().should.contain('icon-valid')
  })

  it('Should_HaveDisabledClassAndAttribute_When_DisabledIsSetToTrue', () => {
    const wrapper = mount(SbInput, {
      propsData: {
        disabled: true
      }
    })

    wrapper.contains('.textfield-input').should.be.true

    const inputWrapper = wrapper.find('.textfield-input')
    inputWrapper.attributes('disabled').should.exist
    inputWrapper.classes().should.contain('disabled')
  })
})
