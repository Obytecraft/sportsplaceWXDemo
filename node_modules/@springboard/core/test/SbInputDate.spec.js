import 'chai/register-should'
import { mount, shallowMount } from '@vue/test-utils'

import { SbInputDate, SbInput } from '../src/components'

const LABEL = 'Click here'

describe('SbInputDate.vue', () => {
  // onChange event should be trigger (it's in fact),
  // but mocha seems not catch it, so this test is past for now
  xit('Should_EmitChangeEvent_When_InputAreFilledWithValidDate', () => {
    const wrapper = mount(SbInputDate, {
      propsData: {
        day: 12,
        month: 1,
        year: 2019
      }
    })

    wrapper.findAll(SbInput).trigger('change')

    wrapper.emitted().change.should.exist
    wrapper.emitted().change[0].should.contain('2019-01-12')
  })

  it('Should_InputLabelEndsBy*_When_RequiredIsSetToTrue', () => {
    const wrapper = mount(SbInputDate, {
      propsData: {
        label: LABEL,
        required: true
      }
    })

    wrapper.contains('.datefield-label').should.be.true
    wrapper.find('.datefield-label').text().should.be.equal(LABEL + '*')
  })

  it('Should_validAndFormatDateReturnIsoDateString_When_ValidDateObjectIsGiven', () => {
    const wrapper = shallowMount(SbInputDate)

    const result = wrapper.vm.validAndFormatDate({
      day: 16,
      month: 1,
      year: 2019
    })

    result.should.be.equal('2019-01-16')
  })

  it('Should_validAndFormatDateReturnFalse_When_InvalidDateObjectIsGiven', () => {
    const wrapper = shallowMount(SbInputDate)

    const result = wrapper.vm.validAndFormatDate({
      day: 16,
      month: 20, // invalid
      year: 2019
    })

    result.should.be.false
  })

  it('Should_validAndFormatDateReturnFalse_When_IncompletDateObjectIsGiven', () => {
    const wrapper = shallowMount(SbInputDate)

    const result = wrapper.vm.validAndFormatDate({
      day: 16,
      year: 2019
    })

    result.should.be.false
  })

  it('Should_checkErrorsReturnErrorObjet_When_DateObjectMissDayValue', () => {
    const wrapper = shallowMount(SbInputDate)

    const result = wrapper.vm.checkErrors({
      month: 1,
      year: 2019
    })

    result.should.be.an('object').eql({
      day: true,
      month: false,
      year: false
    })
  })

  it('Should_checkErrorsReturnFalse_When_RequiredIsFalseDateObjectIsEmpty', () => {
    const wrapper = shallowMount(SbInputDate)

    const result = wrapper.vm.checkErrors({}, false)

    result.should.be.false
  })
})
