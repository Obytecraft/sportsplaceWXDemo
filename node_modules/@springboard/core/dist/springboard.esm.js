import moment from 'moment';
import WORLD_COUNTRIES from 'world-countries';

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script = {
  name: 'SbButton',
  props: {
    /**
     * Text to display
     */
    label: {
      type: String,
      default: ''
    },
    /**
     * Icon to display
     * @see See @springboard/icons
     */
    iconName: {
      type: String,
      default: ''
    },
    /**
     * Push icon on the left side (defaut right)
     */
    iconLeft: {
      type: Boolean,
      default: false
    },
    /**
     * Icon color of the button :
     * `blue, green, red, yellow, white` (default gray)
     */
    color: {
      type: String,
      default: ''
    },
    /**
     * Small size button
     */
    small: {
      type: Boolean,
      default: false
    },
    /**
     * Outline style
     */
    outline: {
      type: Boolean,
      default: false
    },
    /**
     * Type of the button
     */
    type: {
      type: String,
      default: 'button'
    }
  },
  methods: {
    onClick: function onClick () {
      /**
       * Click event
       *
       * @event click
       * @type {undefined}
       */
      this.$emit('click');
    }
  }
};

/* script */
            var __vue_script__ = script;
/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"sb-button",class:[_vm.color, {
    'icon-left': _vm.iconLeft,
    'small': _vm.small,
    'outline': _vm.outline
  }],attrs:{"type":_vm.type},on:{"click":function($event){_vm.onClick();}}},[(_vm.iconName && _vm.iconLeft)?_c('div',{staticClass:"icon icon-left",class:'icon-' + _vm.iconName}):_vm._e(),_vm._v(" "),_c('div',{staticClass:"sb-button-label"},[_vm._v(_vm._s(_vm.label))]),_vm._v(" "),(_vm.iconName && !_vm.iconLeft)?_c('div',{staticClass:"icon icon-right",class:'icon-' + _vm.iconName}):_vm._e()])};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = "data-v-091ef1f4";
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(
    template, style, script$$1,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbButton = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$1 = {
  name: 'SbRadioButtons',
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    /**
     * Label
     */
    label: {
      type: String,
      default: ''
    },
    /**
     * Name attribute
     */
    name: {
      type: String,
      default: function () {
        return 'sb-radio-buttons-' + this._uid
      }
    },
    /**
     * Choices list.
     * Elements must have `label` and `value` attibutes.
     */
    choices: {
      type: Array,
      required: true
    },
    /**
     * Selected value
     * @model
     */
    value: {
      type: [String, Number, Boolean],
      default: undefined
    },
    /**
     * Disabled attribute
     */
    disabled: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    onChange: function onChange (value) {
      /**
       * Selected element `value`
       *
       * @event change
       * @type {string|number|boolean}
       */
      this.$emit('change', value);
    }
  }
};

/* script */
            var __vue_script__$1 = script$1;
/* template */
var __vue_render__$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"radiofield-container"},[(_vm.label)?_c('div',{staticClass:"sb-form-label radiofield-label"},[_vm._v("\n    "+_vm._s(_vm.label)+"\n  ")]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"radiofield-buttons",class:{
      'disabled': _vm.disabled
    }},_vm._l((_vm.choices),function(element,index){return _c('div',{key:index},[_c('label',{staticClass:"radiofield-button"},[_c('span',{staticClass:"sb-form-input radiofield-button-label"},[_vm._v(_vm._s(element.label))]),_vm._v(" "),_c('input',{staticClass:"radiofield-button-input",attrs:{"type":"radio","name":_vm.name,"disabled":_vm.disabled},domProps:{"checked":_vm.value === element.value,"value":element.value},on:{"change":function($event){_vm.onChange($event.target.value);}}}),_vm._v(" "),_c('span',{staticClass:"radiofield-button-checkmark"})])])}),0)])};
var __vue_staticRenderFns__$1 = [];

  /* style */
  var __vue_inject_styles__$1 = undefined;
  /* scoped */
  var __vue_scope_id__$1 = "data-v-9b3f8cb0";
  /* module identifier */
  var __vue_module_identifier__$1 = undefined;
  /* functional template */
  var __vue_is_functional_template__$1 = false;
  /* component normalizer */
  function __vue_normalize__$1(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbRadioButtons.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbRadioButtons = __vue_normalize__$1(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$2 = {
  name: 'SbInput',
  model: {
    prop: 'value',
    event: 'input'
  },
  props: {
    /**
     * Id attribute
     */
    id: {
      type: String,
      default: function () {
        return 'sb-input-' + this._uid
      }
    },
    /**
     * Input label
     */
    label: {
      type: String,
      default: ''
    },
    /**
     * Input value
     * @model
     */
    value: {
      type: [String, Number],
      default: undefined
    },
    /**
     * Error state
     */
    hasError: {
      type: Boolean,
      default: false
    },
    /**
     * Error message to display below the component
     */
    errorMessage: {
      type: String,
      default: 'This field is required'
    },
    /**
     * Defines the value as required (display error message else)
     */
    required: {
      type: Boolean,
      default: false
    },
    /**
     * Disabled attribute
     */
    disabled: {
      type: Boolean,
      default: false
    },
    /**
     * Displays an icon before the input
     * @see See @springboard/icons
     */
    leftIcon: {
      type: String,
      default: ''
    },
    /**
     * Displays a button after the input with the corresponding icon
     * @see See @springboard/icons
     */
    buttonIcon: {
      type: String,
      default: ''
    },
    /**
     * Display the input with shadow behind
     */
    floating: {
      type: Boolean,
      default: false
    }
  },
  data: function data () {
    return {
      mutableHasError: this.hasError || (this.required && !this.value),
      mutableErrorMessage: this.errorMessage,
      mutableDisabled: this.disabled,
      mutableValue: this.value
    }
  },
  computed: {
    /**
     * Bubbles standards HTML Events to parent
     */
    inputListeners: function () {
      var vm = this;

      return Object.assign({}, this.$listeners,

        // override default behavior to ensures it works with v-model
        {input: function () {
          vm.onEvent('input', vm.mutableValue);
        },
        change: function () {
          vm.onEvent('change', vm.mutableValue);
        }})
    },
    /**
     * Fallthrough parent attributes
     */
    inputAttributes: function () {
      return Object.assign({}, this.$attrs)
    }
  },
  watch: {
    hasError: function hasError (newValue) {
      this.mutableHasError = newValue;
    },
    errorMessage: function errorMessage (newValue) {
      this.mutableErrorMessage = newValue;
    },
    disabled: function disabled (newValue) {
      this.mutableDisabled = newValue;
    },
    value: function value (newValue) {
      this.mutableValue = newValue;
    }
  },
  methods: {
    /**
     * Call `HTMLElement.focus(options)` on input field
     *
     * @public
     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
     *
     * @param {any} options
     * @returns {void}
     */
    focus: function focus (options) {
      return this.$refs[this.id].focus(options)
    },
    /**
     * Valids input field
     *
     * @param {string|number}
     * @returns {boolean}
     */
    checkError: function checkError (value) {
      // handle pattern attribute if present on parent
      // else, it shouldnt make any trouble
      var regexPattern = RegExp(this.$attrs.pattern);

      this.mutableHasError = this.hasError || (this.required && !regexPattern.test(value));
    },
    /**
     * Handles custom events, with validation
     *
     * @fires change|input|buttonClick
     * @returns {void}
     */
    onEvent: function onEvent (eventName, value) {
      this.checkError(value);

      /**
       * Events fired with current input value
       *
       * @event change|input|buttonClick
       * @type {string|number}
       */
      this.$emit(eventName, value);
    }
  }
};

/* script */
            var __vue_script__$2 = script$2;
/* template */
var __vue_render__$2 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"textfield-container"},[(_vm.label)?_c('div',{staticClass:"sb-form-label textfield-label"},[_vm._v("\n    "+_vm._s(_vm.label)),(_vm.required)?_c('span',[_vm._v("*")]):_vm._e()]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"textfield-button-wrapper",class:{
      'has-button': _vm.buttonIcon,
      'floating': _vm.floating
    }},[_c('div',{staticClass:"textfield-input-container"},[(((_vm.inputAttributes).type)==='checkbox')?_c('input',_vm._g(_vm._b({directives:[{name:"model",rawName:"v-model",value:(_vm.mutableValue),expression:"mutableValue"}],ref:_vm.id,staticClass:"sb-form-input textfield-input",class:{
          'error': _vm.mutableHasError,
          'disabled': _vm.mutableDisabled,
          'has-left-icon': _vm.leftIcon
        },attrs:{"id":_vm.id,"disabled":_vm.mutableDisabled,"type":"checkbox"},domProps:{"checked":Array.isArray(_vm.mutableValue)?_vm._i(_vm.mutableValue,null)>-1:(_vm.mutableValue)},on:{"change":function($event){var $$a=_vm.mutableValue,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.mutableValue=$$a.concat([$$v]));}else{$$i>-1&&(_vm.mutableValue=$$a.slice(0,$$i).concat($$a.slice($$i+1)));}}else{_vm.mutableValue=$$c;}}}},'input',_vm.inputAttributes,false),_vm.inputListeners)):(((_vm.inputAttributes).type)==='radio')?_c('input',_vm._g(_vm._b({directives:[{name:"model",rawName:"v-model",value:(_vm.mutableValue),expression:"mutableValue"}],ref:_vm.id,staticClass:"sb-form-input textfield-input",class:{
          'error': _vm.mutableHasError,
          'disabled': _vm.mutableDisabled,
          'has-left-icon': _vm.leftIcon
        },attrs:{"id":_vm.id,"disabled":_vm.mutableDisabled,"type":"radio"},domProps:{"checked":_vm._q(_vm.mutableValue,null)},on:{"change":function($event){_vm.mutableValue=null;}}},'input',_vm.inputAttributes,false),_vm.inputListeners)):_c('input',_vm._g(_vm._b({directives:[{name:"model",rawName:"v-model",value:(_vm.mutableValue),expression:"mutableValue"}],ref:_vm.id,staticClass:"sb-form-input textfield-input",class:{
          'error': _vm.mutableHasError,
          'disabled': _vm.mutableDisabled,
          'has-left-icon': _vm.leftIcon
        },attrs:{"id":_vm.id,"disabled":_vm.mutableDisabled,"type":(_vm.inputAttributes).type},domProps:{"value":(_vm.mutableValue)},on:{"input":function($event){if($event.target.composing){ return; }_vm.mutableValue=$event.target.value;}}},'input',_vm.inputAttributes,false),_vm.inputListeners)),_vm._v(" "),(_vm.leftIcon)?_c('div',{staticClass:"textfield-left-icon icon",class:'icon-' + _vm.leftIcon}):_vm._e(),_vm._v(" "),_c('div',{staticClass:"textfield-input-border"})]),_vm._v(" "),(_vm.buttonIcon)?_c('div',{staticClass:"textfield-button-container"},[_c('button',{staticClass:"textfield-button",on:{"click":function($event){_vm.onEvent('buttonClick', _vm.mutableValue);}}},[_c('div',{staticClass:"icon",class:'icon-' + _vm.buttonIcon})])]):_vm._e()]),_vm._v(" "),(_vm.mutableHasError && _vm.mutableErrorMessage)?_c('p',{staticClass:"textfield-error-message"},[_vm._v("\n    "+_vm._s(_vm.mutableErrorMessage)+"\n  ")]):_vm._e()])};
var __vue_staticRenderFns__$2 = [];

  /* style */
  var __vue_inject_styles__$2 = undefined;
  /* scoped */
  var __vue_scope_id__$2 = "data-v-e2102686";
  /* module identifier */
  var __vue_module_identifier__$2 = undefined;
  /* functional template */
  var __vue_is_functional_template__$2 = false;
  /* component normalizer */
  function __vue_normalize__$2(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbInput.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbInput = __vue_normalize__$2(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    undefined,
    undefined
  );

//

var script$3 = {
  name: 'SbInputDate',
  components: {
    SbInput: SbInput
  },
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    /**
     * Name attribute
     */
    name: {
      type: String,
      default: ''
    },
    /**
     * Input label
     */
    label: {
      type: String,
      default: ''
    },
    /**
     * Input value
     * @model
     */
    value: {
      type: String,
      default: ''
    },
    /**
     * Defines the value as required (display error message else)
     */
    required: {
      type: Boolean,
      default: false
    },
    /**
     * Day field placeholder
     */
    hintDay: {
      type: String,
      default: 'Day'
    },
    /**
     * Month field placeholder
     */
    hintMonth: {
      type: String,
      default: 'Month'
    },
    /**
     * Year field placeholder
     */
    hintYear: {
      type: String,
      default: 'Year'
    },
    /**
     * Error message
     */
    errorMessage: {
      type: String,
      default: 'Invalid date'
    }
  },
  data: function data () {
    var momentDate = moment(this.value);
    var objectDate = {};
    if (momentDate.isValid()) {
      objectDate.day = momentDate.get('date');
      objectDate.month = momentDate.get('month') + 1;
      objectDate.year = momentDate.get('year');
    }

    return Object.assign({}, {day: undefined,
      month: undefined,
      year: undefined},
      objectDate,
      {errors: {
        day: false,
        month: false,
        year: false
      }})
  },
  computed: {
    hasError: function hasError () {
      return this.errors && (this.errors.day || this.errors.month || this.errors.year)
    }
  },
  methods: {
    checkErrors: function checkErrors (date, required) {
      if ( required === void 0 ) required = false;

      // in case of optional date (every fields are empty)
      if (!required && !date.day && !date.month && !date.year) {
        return false
      }

      // else, every fields should be filled
      return {
        day: !date.day,
        month: !date.month,
        year: !date.year
      }
    },

    /**
     * Returns an ISO string representation of the date,
     * or false if the date is invalid in any ways
     *
     * @returns string|false
     */
    validAndFormatDate: function validAndFormatDate (date) {
      var day = date.day;
      var month = date.month;
      var year = date.year;

      if (!day || !month || !year) {
        return false
      }

      // adds prepend zero
      day = ('0' + day).slice(-2);
      month = ('0' + month).slice(-2);
      year = '' + year;

      // check date validity
      var isoDate = year + "-" + month + "-" + day;
      if (!moment(isoDate).isValid()) {
        // invalid date, we put all errors flags to true
        // because we don't know the exact reason
        return false
      }

      return isoDate
    },

    onChange: function onChange () {
      var date = {
        day: this.day,
        month: this.month,
        year: this.year
      };

      this.errors = this.checkErrors(date, this.required);
      if (this.hasError) {
        return
      }

      /**
       * Date in ISO format `YYYY-MM-DD`
       *
       * @event change
       * @type {text}
       */
      var isoDate = this.validAndFormatDate(date);
      if (!isoDate) {
        // invalid iso date
        this.errors = {
          day: true,
          month: true,
          year: true
        };

        return
      }

      this.$emit('change', isoDate);
    }
  }
};

/* script */
            var __vue_script__$3 = script$3;
/* template */
var __vue_render__$3 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"datefield-container"},[(_vm.label)?_c('div',{staticClass:"sb-form-label datefield-label"},[_vm._v("\n    "+_vm._s(_vm.label)),(_vm.required)?_c('span',[_vm._v("*")]):_vm._e()]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"datefield-content"},[_c('sb-input',{staticClass:"datefield-day",attrs:{"type":"number","hint":_vm.hintDay,"has-error":_vm.errors && _vm.errors.day,"error-message":""},on:{"change":function($event){_vm.onChange();}},model:{value:(_vm.day),callback:function ($$v) {_vm.day=$$v;},expression:"day"}}),_vm._v(" "),_c('div',{staticClass:"datefield-separator"}),_vm._v(" "),_c('sb-input',{staticClass:"datefield-month",attrs:{"type":"number","hint":_vm.hintMonth,"has-error":_vm.errors && _vm.errors.month,"error-message":""},on:{"change":function($event){_vm.onChange();}},model:{value:(_vm.month),callback:function ($$v) {_vm.month=$$v;},expression:"month"}}),_vm._v(" "),_c('div',{staticClass:"datefield-separator"}),_vm._v(" "),_c('sb-input',{staticClass:"datefield-year",attrs:{"type":"number","hint":_vm.hintYear,"has-error":_vm.errors && _vm.errors.year,"error-message":""},on:{"change":function($event){_vm.onChange();}},model:{value:(_vm.year),callback:function ($$v) {_vm.year=$$v;},expression:"year"}})],1),_vm._v(" "),(_vm.hasError && _vm.errorMessage)?_c('p',{staticClass:"datefield-error-message"},[_vm._v("\n    "+_vm._s(_vm.errorMessage)+"\n  ")]):_vm._e()])};
var __vue_staticRenderFns__$3 = [];

  /* style */
  var __vue_inject_styles__$3 = undefined;
  /* scoped */
  var __vue_scope_id__$3 = "data-v-e8e50e42";
  /* module identifier */
  var __vue_module_identifier__$3 = undefined;
  /* functional template */
  var __vue_is_functional_template__$3 = false;
  /* component normalizer */
  function __vue_normalize__$3(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbInputDate.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbInputDate = __vue_normalize__$3(
    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
    __vue_inject_styles__$3,
    __vue_script__$3,
    __vue_scope_id__$3,
    __vue_is_functional_template__$3,
    __vue_module_identifier__$3,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var MODAL_OPEN_CLASS = 'sb-modal-open';

var script$4 = {
  name: 'SbModal',
  model: {
    prop: 'show',
    event: 'close'
  },
  props: {
    /**
     * Display/hide the modal
     * @model
     */
    show: {
      type: Boolean,
      default: false
    },
    /**
     * Set modal in fullscreen mode
     */
    fullscreen: {
      type: Boolean,
      default: false
    }
  },
  data: function data () {
    return {
      mutableShow: this.show
    }
  },
  watch: {
    show: function show (newValue) {
      if (newValue) {
        this.$emit('opened');
      }
      this.mutableShow = newValue;
    },

    /**
     * Adds/removes a special class on the body
     * to avoid it to scroll when the modal is open
     */
    mutableShow: function mutableShow (newValue) {
      if (newValue) {
        document.body.classList.add(MODAL_OPEN_CLASS);
      } else {
        document.body.classList.remove(MODAL_OPEN_CLASS);
      }
    }
  },
  methods: {
    close: function close () {
      /**
       * On modal close.
       * Value should always be `false`
       *
       * @event close
       * @type {boolean}
       */
      this.$emit('close', false);
      this.mutableShow = false;
    },

    /**
     * Click on wrapper (outside the modal)
     * will close this one
     */
    clickOnWrapper: function clickOnWrapper (target) {
      // not directly on the wrapper div, out
      if (!target.classList.contains('sb-modal-wrapper')) {
        return
      }

      this.close();
    }
  }
};

/* script */
            var __vue_script__$4 = script$4;
/* template */
var __vue_render__$4 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.mutableShow)?_c('transition',{attrs:{"name":_vm.fullscreen ? 'modal-fullscreen' : 'modal'}},[_c('div',{staticClass:"sb-modal-wrapper",class:{
      'fullscreen': _vm.fullscreen
    },on:{"click":function($event){_vm.clickOnWrapper($event.target);}}},[_c('div',{staticClass:"sb-modal-container sb-shadow-centered-3"},[(this.$slots.header)?_c('header',{staticClass:"sb-modal-header"},[_vm._t("header")],2):_vm._e(),_vm._v(" "),(this.$slots.default)?_c('main',{staticClass:"sb-modal-body"},[_vm._t("default")],2):_vm._e(),_vm._v(" "),(this.$slots.footer)?_c('footer',{staticClass:"sb-modal-footer"},[_vm._t("footer")],2):_vm._e()])])]):_vm._e()};
var __vue_staticRenderFns__$4 = [];

  /* style */
  var __vue_inject_styles__$4 = undefined;
  /* scoped */
  var __vue_scope_id__$4 = "data-v-0c6b8cd6";
  /* module identifier */
  var __vue_module_identifier__$4 = undefined;
  /* functional template */
  var __vue_is_functional_template__$4 = false;
  /* component normalizer */
  function __vue_normalize__$4(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbModal.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbModal = __vue_normalize__$4(
    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
    __vue_inject_styles__$4,
    __vue_script__$4,
    __vue_scope_id__$4,
    __vue_is_functional_template__$4,
    __vue_module_identifier__$4,
    undefined,
    undefined
  );

//

var script$5 = {
  name: 'SbInputPhone',
  components: {
    SbInput: SbInput,
    SbModal: SbModal
  },
  model: {
    prop: 'value',
    event: 'input'
  },
  props: {
    /**
     * Country selector label
     */
    countryLabel: {
      type: String,
      default: ''
    },
    /**
     * Phone input label
     */
    phoneLabel: {
      type: String,
      default: ''
    },
    /**
     * Global model
     * @model
     */
    value: {
      type: Object,
      default: undefined
    },
    /**
     * Defines the value as required (display error message else)
     */
    required: {
      type: Boolean,
      default: false
    },
    /**
     * Country selector modal title
     */
    countryModalTitle: {
      type: String,
      default: 'Country code'
    },
    /**
     * Error message to display below the component
     */
    errorMessage: {
      type: String,
      default: 'This field is required'
    }
  },
  data: function data () {
    return {
      mutableCountry: this.value ? this.getCountryFromList(this.value.country) : undefined,
      mutableCountryCode: this.value ? this.value.country : '',
      mutablePhone: this.value ? this.value.value : '',
      countryHasError: this.required && !this.value,
      phoneHasError: this.required && !this.value,
      showCountryModal: false,
      countryListFilter: ''
    }
  },
  computed: {
    countryList: function countryList () {
      return this.buildCountryList(this.countryListFilter)
    },

    /**
     * Bubbles standards HTML Events to parent
     */
    inputListeners: function () {
      var vm = this;

      return Object.assign({}, this.$listeners,

        // override default behavior to ensures it works with v-model
        {input: function () {
          vm.onEvent('input', vm.mutableValue);
        },
        change: function () {
          vm.onEvent('change', vm.mutableValue);
        }})
    },
    /**
     * Fallthrough parent attributes
     */
    inputAttributes: function () {
      return Object.assign({}, this.$attrs)
    }
  },
  methods: {
    validate: function validate () {
      this.countryHasError = false;
      this.phoneHasError = false;

      if (!this.required) {
        return
      }

      if (!this.mutableCountryCode) {
        this.countryHasError = true;
      }

      if (!this.mutablePhone) {
        this.phoneHasError = true;
      }
    },
    openCountryModal: function openCountryModal () {
      this.showCountryModal = true;
    },
    closeCountryModal: function closeCountryModal () {
      // reset country list filter on close
      this.countryListFilter = '';

      this.showCountryModal = false;
    },
    selectCountryAndCloseModal: function selectCountryAndCloseModal (value) {
      this.mutableCountry = value;
      this.mutableCountryCode = value.cca2;

      this.closeCountryModal();
      this.onEvent('input');
    },
    /**
     * @returns List of countries with calling code
     */
    buildCountryList: function buildCountryList (filter) {
      var countriesWithCallingCode = WORLD_COUNTRIES.filter(function (country) { return country.callingCode.length; });

      if (!filter) {
        return countriesWithCallingCode
      }

      // return only country with name starting by filter value
      return countriesWithCallingCode.filter(function (country) { return country.name.common.toLowerCase().indexOf(filter.toLowerCase()) !== -1; }
      )
    },
    getCountryFromList: function getCountryFromList (countryCode) {
      // length should be 1 or 0
      var filterCountries = WORLD_COUNTRIES.filter(function (country) { return country.cca2 === countryCode; });

      return filterCountries.length ? filterCountries[0] : undefined
    },
    onEvent: function onEvent (eventName) {
      this.validate();

      /**
       * Bubble `change` and `input` events
       *
       * @event change|input
       * @type {object}
       */
      this.$emit(eventName, {
        country: this.mutableCountryCode,
        value: this.mutablePhone
      });
    }
  }
};

/* script */
            var __vue_script__$5 = script$5;
/* template */
var __vue_render__$5 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"phonefield-container"},[_c('div',{staticClass:"phonefield-content"},[_c('div',{staticClass:"phonefield-country"},[_c('div',{staticClass:"sb-form-label phonefield-country-label"},[_vm._v("\n        "+_vm._s(_vm.countryLabel)),(_vm.required)?_c('span',[_vm._v("*")]):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"phonefield-country-container",class:{
          'error': _vm.countryHasError
        }},[_c('div',{staticClass:"phonefield-country-flag"},[(_vm.mutableCountry)?_c('div',{staticClass:"flag",class:("flag-" + (_vm.mutableCountry.cca2.toLowerCase()))}):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"phonefield-country-value sb-text-14"},[_vm._v("\n          "+_vm._s(_vm.mutableCountry && ("+" + (_vm.mutableCountry.callingCode[0])))+"\n        ")]),_vm._v(" "),_c('div',{staticClass:"phonefield-country-button-container"},[_c('button',{staticClass:"phonefield-country-button",on:{"click":function($event){_vm.openCountryModal();}}},[_c('div',{staticClass:"icon icon-arrow2-down"})])])]),_vm._v(" "),(_vm.countryHasError)?_c('p',{staticClass:"phonefield-error-message"},[_vm._v("\n        "+_vm._s(_vm.errorMessage)+"\n      ")]):_vm._e()]),_vm._v(" "),_c('sb-input',_vm._g(_vm._b({staticClass:"phonefield-input-phone",attrs:{"left-icon":"mobile","label":_vm.phoneLabel,"has-error":_vm.phoneHasError,"error-message":_vm.errorMessage,"required":_vm.required},model:{value:(_vm.mutablePhone),callback:function ($$v) {_vm.mutablePhone=$$v;},expression:"mutablePhone"}},'sb-input',_vm.inputAttributes,false),_vm.inputListeners))],1),_vm._v(" "),_c('sb-modal',{attrs:{"fullscreen":""},model:{value:(_vm.showCountryModal),callback:function ($$v) {_vm.showCountryModal=$$v;},expression:"showCountryModal"}},[_c('template',{slot:"header"},[_c('div',{staticClass:"phonefield-modal-header"},[_c('div',{staticClass:"phonefield-modal-header-close-icon",on:{"click":function($event){_vm.closeCountryModal();}}},[_c('div',{staticClass:"icon icon-cross"})]),_vm._v(" "),_c('div',{staticClass:"phonefield-modal-header-title sb-text-18"},[_vm._v(_vm._s(_vm.countryModalTitle))]),_vm._v(" "),_c('div',{staticClass:"phonefield-search-input"},[_c('sb-input',{attrs:{"left-icon":"search","floating":""},model:{value:(_vm.countryListFilter),callback:function ($$v) {_vm.countryListFilter=$$v;},expression:"countryListFilter"}})],1)])]),_vm._v(" "),_c('div',{staticClass:"phonefield-modal-content"},_vm._l((_vm.countryList),function(country,index){return _c('div',{key:index,staticClass:"phonefield-modal-item sb-text-14",on:{"click":function($event){_vm.selectCountryAndCloseModal(country);}}},[_c('div',{staticClass:"country-flag"},[_c('div',{staticClass:"flag",class:("flag-" + (country.cca2.toLowerCase()))})]),_vm._v(" "),_c('div',{staticClass:"country-indicator"},[_vm._v("\n          +"+_vm._s(country.callingCode[0])+"\n        ")]),_vm._v(" "),_c('div',{staticClass:"country-name"},[_vm._v("\n          "+_vm._s(country.name.common)+"\n        ")])])}),0)],2)],1)};
var __vue_staticRenderFns__$5 = [];

  /* style */
  var __vue_inject_styles__$5 = undefined;
  /* scoped */
  var __vue_scope_id__$5 = "data-v-00846084";
  /* module identifier */
  var __vue_module_identifier__$5 = undefined;
  /* functional template */
  var __vue_is_functional_template__$5 = false;
  /* component normalizer */
  function __vue_normalize__$5(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbInputPhone.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbInputPhone = __vue_normalize__$5(
    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
    __vue_inject_styles__$5,
    __vue_script__$5,
    __vue_scope_id__$5,
    __vue_is_functional_template__$5,
    __vue_module_identifier__$5,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$6 = {
  name: 'SbCircleProgress',
  props: {
    /**
     * Circle radius in px
     */
    radius: {
      type: Number,
      required: true
    },
    /**
     * Progress state in percent
     */
    progress: {
      type: Number,
      required: true
    },
    /**
     * Circle stroke in px
     */
    stroke: {
      type: Number,
      default: 3
    },
    /**
     * Image display inside the circle
     */
    imageSource: {
      type: String,
      default: ''
    }
  },
  data: function data () {
    var normalizedRadius = this.radius - this.stroke * 2;
    var circumference = normalizedRadius * 2 * Math.PI;

    return {
      normalizedRadius: normalizedRadius,
      circumference: circumference
    }
  },
  computed: {
    strokeDashoffset: function strokeDashoffset () {
      return this.circumference - this.progress / 100 * this.circumference
    }
  }
};

/* script */
            var __vue_script__$6 = script$6;
/* template */
var __vue_render__$6 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"sb-circle-progress-container sb-shadow-centered-3"},[_c('div',{staticClass:"sb-circle-progress-background",style:({
      top: ((_vm.stroke * 3) + "px"),
      right: ((_vm.stroke * 3) + "px"),
      bottom: ((_vm.stroke * 3) + "px"),
      left: ((_vm.stroke * 3) + "px"),
      'background-image': _vm.imageSource ? ("url(" + _vm.imageSource + ")") : ''
    })},[(!_vm.imageSource)?_c('div',{staticClass:"icon icon-add-profile"}):_vm._e()]),_vm._v(" "),_c('svg',{attrs:{"height":_vm.radius * 2,"width":_vm.radius * 2}},[_c('defs',[_c('linearGradient',{attrs:{"id":"sb-gradient","x1":"0%","y1":"0%","x2":"0%","y2":"100%"}},[_c('stop',{attrs:{"offset":"0%","stop-color":"#02BE8A"}}),_vm._v(" "),_c('stop',{attrs:{"offset":"100%","stop-color":"#0082C3"}})],1)],1),_vm._v(" "),_c('circle',{staticClass:"sb-circle-progress-border",attrs:{"x":"0","y":"0","stroke-width":_vm.stroke * 3,"r":_vm.normalizedRadius,"cx":_vm.radius,"cy":_vm.radius}}),_vm._v(" "),_c('circle',{staticClass:"sb-circle-progress-cirlce",style:({ strokeDashoffset: _vm.strokeDashoffset }),attrs:{"x":"0","y":"0","stroke":"url(#sb-gradient)","stroke-dasharray":_vm.circumference + ' ' + _vm.circumference,"stroke-width":_vm.stroke,"r":_vm.normalizedRadius,"cx":_vm.radius,"cy":_vm.radius}}),_vm._v(" "),(_vm.progress < 100)?_c('svg',{staticClass:"sb-circle-progress-indicator",attrs:{"x":_vm.radius * 2 - 34,"y":14}},[_c('circle',{attrs:{"r":"11","cx":"13","cy":"13"}}),_vm._v(" "),_c('text',{attrs:{"x":"13","y":"13","dy":".3em","text-anchor":"middle"}},[_vm._v("\n        "+_vm._s(_vm.progress)+"%\n      ")])]):_vm._e()])])};
var __vue_staticRenderFns__$6 = [];

  /* style */
  var __vue_inject_styles__$6 = undefined;
  /* scoped */
  var __vue_scope_id__$6 = "data-v-5b106068";
  /* module identifier */
  var __vue_module_identifier__$6 = undefined;
  /* functional template */
  var __vue_is_functional_template__$6 = false;
  /* component normalizer */
  function __vue_normalize__$6(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbCircleProgress.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbCircleProgress = __vue_normalize__$6(
    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
    __vue_inject_styles__$6,
    __vue_script__$6,
    __vue_scope_id__$6,
    __vue_is_functional_template__$6,
    __vue_module_identifier__$6,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$7 = {
  name: 'SbNavBar',
  props: {
    /**
     * Left button link.
     * If filled `click` event won't be fired
     */
    to: {
      type: String,
      default: ''
    },
    /**
     * Left button icon.
     */
    iconLeft: {
      type: String,
      default: 'arrow2-left'
    },
    /**
     * Background color : `blue` or `white` (default)
     */
    color: {
      type: String,
      default: ''
    }
  },
  data: function data () {
    return {
      // generate a random name to allow usage of multiple instance on the same page
      buttonName: Math.random().toString(36).substring(2, 15)
    }
  },
  methods: {
    onClick: function onClick () {
      /**
       * On left icon click
       *
       * @event click
       * @type {undefined}
       */
      this.$emit('click');
    }
  }
};

/* script */
            var __vue_script__$7 = script$7;
/* template */
var __vue_render__$7 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"navbar-container",class:_vm.color},[_c('div',{staticClass:"navbar-button-icon"},[(_vm.to)?_c('router-link',{attrs:{"to":_vm.to}},[_c('div',{class:("icon icon-" + _vm.iconLeft)})]):_c('div',{staticClass:"sb-clickable"},[_c('div',{class:("icon icon-" + _vm.iconLeft),on:{"click":function($event){_vm.onClick();}}})])],1),_vm._v(" "),_c('div',{staticClass:"navbar-content sb-text-18"},[_vm._t("default")],2)])};
var __vue_staticRenderFns__$7 = [];

  /* style */
  var __vue_inject_styles__$7 = undefined;
  /* scoped */
  var __vue_scope_id__$7 = "data-v-698c253d";
  /* module identifier */
  var __vue_module_identifier__$7 = undefined;
  /* functional template */
  var __vue_is_functional_template__$7 = false;
  /* component normalizer */
  function __vue_normalize__$7(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbNavBar.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbNavBar = __vue_normalize__$7(
    { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
    __vue_inject_styles__$7,
    __vue_script__$7,
    __vue_scope_id__$7,
    __vue_is_functional_template__$7,
    __vue_module_identifier__$7,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$8 = {
  name: 'SbSwitch',
  model: {
    prop: 'value',
    event: 'toggle'
  },
  props: {
    /**
     * The id for the switch.
     */
    id: {
      type: String,
      default: function () {
        return 'sb-switch-' + this._uid
      }
    },
    /**
     * The name for the switch.
     */
    name: {
      type: String,
      default: ''
    },
    /**
     * Label
     */
    label: {
      type: String,
      default: ''
    },
    /**
     * Switch value
     * @model
     */
    value: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    toggle: function toggle () {
      /**
       * Toggle event
       *
       * @event toggle
       * @type Boolean
       */
      this.$emit('toggle', !this.value);
    }
  }
};

/* script */
            var __vue_script__$8 = script$8;
/* template */
var __vue_render__$8 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"switch-container"},[(_vm.label)?_c('div',{staticClass:"sb-form-label switch-label"},[_vm._v("\n    "+_vm._s(_vm.label)+"\n  ")]):_vm._e(),_vm._v(" "),_c('label',{staticClass:"switch-content-wrapper",attrs:{"for":_vm.id}},[_c('div',{class:{
        'switch-slot': this.$slots.default
      }},[_vm._t("default")],2),_vm._v(" "),_c('div',{staticClass:"switch"},[_c('input',{attrs:{"id":_vm.id,"type":"checkbox","name":_vm.name},domProps:{"checked":_vm.value},on:{"click":function($event){_vm.toggle();}}}),_vm._v(" "),_vm._m(0)])])])};
var __vue_staticRenderFns__$8 = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"slider round"},[_c('div',{staticClass:"checkmark"})])}];

  /* style */
  var __vue_inject_styles__$8 = undefined;
  /* scoped */
  var __vue_scope_id__$8 = "data-v-1da10b63";
  /* module identifier */
  var __vue_module_identifier__$8 = undefined;
  /* functional template */
  var __vue_is_functional_template__$8 = false;
  /* component normalizer */
  function __vue_normalize__$8(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbSwitch.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbSwitch = __vue_normalize__$8(
    { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
    __vue_inject_styles__$8,
    __vue_script__$8,
    __vue_scope_id__$8,
    __vue_is_functional_template__$8,
    __vue_module_identifier__$8,
    undefined,
    undefined
  );

//

var script$9 = {
  name: 'SbCookieManager',
  components: {
    SbButton: SbButton,
    SbModal: SbModal,
    SbSwitch: SbSwitch
  },
  props: {
    /**
     * Fullscreen modal mode.
     */
    modalFullscreen: {
      type: Boolean,
      default: false
    },
    /**
     * Display the banner or not.
     */
    showBanner: {
      type: Boolean,
      default: true
    },
    /**
     * Service object: { id: String, name: String, description: String, url: String, callback: Function, cookies: String[] }
     */
    services: {
      type: Array,
      required: true
    },
    /**
     * Label of the customize button
     */
    labelButtonCustomize: {
      type: String,
      default: ''
    },
    /**
     * Label of the accept button
     */
    labelButtonAccept: {
      type: String,
      default: ''
    },
    /**
     * Title of the services modal
     */
    modalTitle: {
      type: String,
      default: ''
    },
    /**
     * Label of the validate button
     */
    labelButtonValidate: {
      type: String,
      default: ''
    }
  },
  data: function data () {
    return {
      showModal: false
    }
  },
  methods: {
    permitAll: function permitAll () {
      this.services.forEach(function (service) {
        service.enabled = true;
      });
      this.update();
    },
    onCloseModal: function onCloseModal () {
      this.closeModal();
    },
    openModal: function openModal () {
      this.showModal = true;
    },
    closeModal: function closeModal () {
      this.showModal = false;
    },
    validate: function validate () {
      this.closeModal();
      this.update();
    },
    update: function update () {
      /**
       * Click event
       *
       * @event onChange
       * @type {object}
       */
      this.$emit('onChange', {
        showBanner: false,
        services: this.services
      });
    }
  }
};

/* script */
            var __vue_script__$9 = script$9;
/* template */
var __vue_render__$9 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"sb-cookie-manager"},[(_vm.showBanner)?_c('div',{staticClass:"banner"},[_c('div',{staticClass:"sb-text-16 content"},[_vm._t("default")],2),_vm._v(" "),_c('div',{staticClass:"buttons"},[_c('sb-button',{staticClass:"button-customize",attrs:{"label":_vm.labelButtonCustomize,"color":"blue"},on:{"click":function($event){_vm.openModal();}}}),_vm._v(" "),_c('sb-button',{staticClass:"button-validate",attrs:{"label":_vm.labelButtonAccept,"color":"white"},on:{"click":function($event){_vm.permitAll();}}})],1)]):_vm._e(),_vm._v(" "),_c('sb-modal',{ref:"modal-cookie-manager",staticClass:"modal-cookie-manager",attrs:{"show":_vm.showModal,"fullscreen":_vm.modalFullscreen},on:{"close":function($event){_vm.onCloseModal();}}},[_c('div',{staticClass:"header",attrs:{"slot":"header"},slot:"header"},[_c('h1',{staticClass:"sb-h4 sb-text-16 title"},[_vm._v(_vm._s(_vm.modalTitle))]),_vm._v(" "),_c('div',{staticClass:"icon icon-cross-1 close-icon",on:{"click":function($event){_vm.closeModal();}}})]),_vm._v(" "),_c('div',{staticClass:"body"},[_c('ul',{staticClass:"list"},_vm._l((_vm.services),function(service,index){return _c('li',{key:index,staticClass:"item"},[_c('div',{staticClass:"item-content"},[_c('div',{staticClass:"sb-h4 sb-text-16 item-name"},[_vm._v(_vm._s(service.name))]),_vm._v(" "),_c('div',{staticClass:"sb-text-16 item-description"},[_vm._v(_vm._s(service.description))])]),_vm._v(" "),_c('div',{staticClass:"item-switch"},[_c('sb-switch',{ref:'switch-' + service.id,refInFor:true,attrs:{"id":'switch-' + service.id,"name":'switch-' + service.id},model:{value:(service.enabled),callback:function ($$v) {_vm.$set(service, "enabled", $$v);},expression:"service.enabled"}})],1)])}),0)]),_vm._v(" "),_c('div',{staticClass:"footer",attrs:{"slot":"footer"},slot:"footer"},[_c('div',{staticClass:"buttons"},[_c('sb-button',{staticClass:"button-validate",attrs:{"label":_vm.labelButtonValidate,"color":"blue","icon-name":"arrow-right"},on:{"click":function($event){_vm.validate();}}})],1)])])],1)};
var __vue_staticRenderFns__$9 = [];

  /* style */
  var __vue_inject_styles__$9 = undefined;
  /* scoped */
  var __vue_scope_id__$9 = "data-v-c85107f0";
  /* module identifier */
  var __vue_module_identifier__$9 = undefined;
  /* functional template */
  var __vue_is_functional_template__$9 = false;
  /* component normalizer */
  function __vue_normalize__$9(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbCookieManager.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbCookieManager = __vue_normalize__$9(
    { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
    __vue_inject_styles__$9,
    __vue_script__$9,
    __vue_scope_id__$9,
    __vue_is_functional_template__$9,
    __vue_module_identifier__$9,
    undefined,
    undefined
  );

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$a = {
  name: 'SbCategoryCard',
  props: {
    /**
     * Titre inside card
     */
    title: {
      type: String,
      required: true
    },
    /**
     * Change **title** html tag or **container** tag
     */
    tag: {
      type: Object,
      default: function () { return ({
        title: 'h3',
        container: 'a'
      }); }
    },
    /**
     * url when click on card
     */
    url: {
      type: String,
      default: null
    },
    /**
     * Image inside card
     */
    image: {
      type: String,
      required: true
    },
    /**
     * color on card
     */
    color: {
      type: [String, Array],
      default: '#000000'
    }
  },
  computed: {
    cssColor: function cssColor () {
      var color = this.color;

      if (typeof (color) !== 'string') {
        return ("background-image: linear-gradient(45deg, " + (color[0]) + " 0%, " + (color[1]) + " 100%);")
      }

      return ("background-color: " + color + ";")
    },
    tagHtml: function tagHtml () {
      return {
        title: this.tag.title || 'h3',
        container: this.tag.container || 'a'
      }
    }
  }
};

/* script */
            var __vue_script__$a = script$a;
/* template */
var __vue_render__$a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('article',{staticClass:"card-category__container"},[_c(_vm.tagHtml.container,{tag:"component",staticClass:"card-category",style:(("background-image: url('" + _vm.image + "')")),attrs:{"href":_vm.url}},[_c('div',{staticClass:"overlay",style:(_vm.cssColor)}),_vm._v(" "),_c(_vm.tagHtml.title,{tag:"component",staticClass:"card-category__title"},[_vm._v("\n      "+_vm._s(_vm.title)+"\n    ")])],1)],1)};
var __vue_staticRenderFns__$a = [];

  /* style */
  var __vue_inject_styles__$a = undefined;
  /* scoped */
  var __vue_scope_id__$a = "data-v-88fee50a";
  /* module identifier */
  var __vue_module_identifier__$a = undefined;
  /* functional template */
  var __vue_is_functional_template__$a = false;
  /* component normalizer */
  function __vue_normalize__$a(
    template, style, script,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "SbCategoryCard.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var SbCategoryCard = __vue_normalize__$a(
    { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
    __vue_inject_styles__$a,
    __vue_script__$a,
    __vue_scope_id__$a,
    __vue_is_functional_template__$a,
    __vue_module_identifier__$a,
    undefined,
    undefined
  );

/* eslint-disable import/prefer-default-export, semi */

var components = /*#__PURE__*/Object.freeze({
  SbButton: SbButton,
  SbRadioButtons: SbRadioButtons,
  SbInput: SbInput,
  SbInputDate: SbInputDate,
  SbInputPhone: SbInputPhone,
  SbCircleProgress: SbCircleProgress,
  SbModal: SbModal,
  SbNavBar: SbNavBar,
  SbSwitch: SbSwitch,
  SbCookieManager: SbCookieManager,
  SbCategoryCard: SbCategoryCard
});

// Import vue components

// install function executed by Vue.use()
function install (Vue) {
  if (install.installed) {
    return
  }

  install.installed = true;
  Object.keys(components).forEach(function (componentName) {
    Vue.component(componentName, components[componentName]);
  });
}

// Create module definition for Vue.use()
var plugin = {
  install: install
};

// To auto-install when vue is found
/* global window global */
var GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}

export { SbButton, SbRadioButtons, SbInput, SbInputDate, SbInputPhone, SbCircleProgress, SbModal, SbNavBar, SbSwitch, SbCookieManager, SbCategoryCard };
